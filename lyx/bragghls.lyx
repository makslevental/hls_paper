#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\begin_preamble
% for subfigures/subtables
\usepackage[caption=false,font=footnotesize]{subfig}
\usepackage{hyperref}
\hypersetup{colorlinks=true}
\usepackage[dvipsnames]{xcolor}
\definecolor{lgray}{rgb}{0.95, 0.95, 0.95}
\usepackage{mathtools}
\end_preamble
\options conference
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Your Title"
\pdf_author "Your Name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\family typewriter
BraggHLS
\end_layout

\begin_layout Author
\begin_inset Flex Author Name
status open

\begin_layout Plain Layout
Maksim
\begin_inset space ~
\end_inset

Levental
\end_layout

\end_inset


\begin_inset Flex Author Affiliation
status collapsed

\begin_layout Plain Layout
University of Chicago
\begin_inset Newline newline
\end_inset

Email: test@test.tes
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and 
\end_layout

\end_inset


\begin_inset Flex Author Name
status open

\begin_layout Plain Layout
Ryan
\begin_inset space ~
\end_inset

Chard
\end_layout

\end_inset


\begin_inset Flex Author Affiliation
status collapsed

\begin_layout Plain Layout
Ecole Superieure
\begin_inset Newline newline
\end_inset

Nantes, France
\begin_inset Newline newline
\end_inset

Email: second@second.fr
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and 
\end_layout

\end_inset


\begin_inset Flex Author Name
status collapsed

\begin_layout Plain Layout
Kyle
\begin_inset space ~
\end_inset

Chard
\begin_inset Newline newline
\end_inset

and Ian
\begin_inset space ~
\end_inset

Foster
\end_layout

\end_inset


\begin_inset Flex Author Affiliation
status collapsed

\begin_layout Plain Layout
Star Academy
\begin_inset Newline newline
\end_inset

San Francisco, California 99999-9999
\begin_inset Newline newline
\end_inset

Telephone: (800) 555–5555
\begin_inset Newline newline
\end_inset

Fax: (888) 555–5555
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
In many experiment-driven scientific domains, such as high-energy physics,
 material science, and cosmology, very high data rate experiments impose
 hard constraints on the corresponding data acquisition systems: collected
 data must either be indiscriminately stored for post-processing and analysis,
 thereby necessitating large storage capacity, or accurately filtered in
 real-time, thereby necessitating low latency execution.
 Deep neural networks, effective in many other filtering tasks, have not
 been widely employed in such data acquisition systems, due to design and
 deployment difficulties.
 This paper presents an open source, lightweight, compiler framework 
\family typewriter
BraggHLS
\family default
, based on high-level synthesis techniques, for translating high-level represent
ations of deep neural networks to low-level representations, suitable for
 deployment to near-sensor devices such as field-programmable gate arrays.
 We evaluate 
\family typewriter
BraggHLS
\family default
 on various workloads and present a case-study implementation of a deep
 neural network for Bragg peak detection in the context of high-energy diffracti
on microscopy.
 We show 
\family typewriter
BraggHLS
\family default
 is able to produce an implementation of the network with a throughput 4.8
 µs/sample, which is approximately a 4
\begin_inset Formula $\times$
\end_inset

 improvement over the existing implementation.
\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction"

\end_inset


\end_layout

\begin_layout Standard
Very high data rates are observed and, consequently, large datasets are
 generated across a broad range of experiments in scientific domains, such
 as high-energy physics, material science, and cosmology.
 For example, in high-energy physics, the LHCb detector, at the CERN Large
 Hadron Collider, is tasked with observing the trajectories of particles
 produced in proton-proton collisions at a rate of 40 million per second
 (i.e., 40 MHz) 
\begin_inset CommandInset citation
LatexCommand cite
key "pmlr-v42-glig14"
literal "false"

\end_inset

.
 With a packet size of approximately 50 kB (per collision), this implies
 a data rate of approximately 2 TB/s.
 Ultimately, in combination with other detectors, the LHC processes approximatel
y 100 EB of data a year.
 In materials science, high-energy diffraction microscopy (HEDM) techniques,
 which provide non-destructive characterization of structure and its evolution
 in a broad class of single-crystal and polycrystalline materials, can have
 collection rates approaching 1 MHz 
\begin_inset CommandInset citation
LatexCommand cite
key "Hammer_2021"
literal "false"

\end_inset

, with a corresponding packet size of 80 kB.
 In cosmology, the Square Kilometer Array, a radio telescope projected to
 be completed in 2024 and to be operational by 2027 
\begin_inset CommandInset citation
LatexCommand cite
key "mcmullin2022square"
literal "false"

\end_inset

, will sustain data rates in excess of 10 TB/s 
\begin_inset CommandInset citation
LatexCommand cite
key "grainge2017square"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Naturally, for high data rate experiments, directly storing and distributing
 such large quantities of data to the associated research communities for
 further analysis is cost prohibitive.
 Thus, either compression (in the case of storage and transmission) or outright
 filtering is necessary, i.e., only a small fraction of the most 
\begin_inset Quotes eld
\end_inset

interesting
\begin_inset Quotes erd
\end_inset

 data is selected at time of collection, with the remainder being permanently
 discarded.
 In this work we focus on the filtering approach.
 Note, the tradeoff made in employing filtering should be clear: reduced
 storage at the expense of more stringent latency constraints (on the filtering
 mechanisms).
 In addition, the risk of discarding meaningful data introduces accuracy
 (of the filtering mechanisms) as a critical new dimension of the data acquisiti
on systems.
 Typically, these filtering mechanisms consist either of physics based models
 
\begin_inset CommandInset citation
LatexCommand cite
key "LHCB-FIGURE-2020-018"
literal "false"

\end_inset

 or machine learning models 
\begin_inset CommandInset citation
LatexCommand cite
key "Gligorov_2013"
literal "false"

\end_inset

; in either case maximally efficient and effective use of the target hardware
 platform is tantamount to accuracy.
 Irrespective of the type of technique employed, almost universally, for
 the ultra-low latency use cases (e.g., sub-microsecond latency constraints),
 the implementation is deployed to either field-programmable gate arrays
 (FPGAs) or application-specific integrated circuits (ASICs) 
\begin_inset CommandInset citation
LatexCommand cite
key "Duarte_2018"
literal "false"

\end_inset

.
 Here we focus primarily on FPGAs.
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
The reason for this is only FPGAs and ASICs are flexible enough to satisfy
 the latency constraints for a wide range of techniques.
 Note, in this work we focus exclusively on FPGAs.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Deep neural networks (DNNs), a particular type of machine learning model,
 have been shown to be effective in many scientific and commercial domains
 due to their 
\begin_inset Quotes eld
\end_inset

representational capacity
\begin_inset Quotes erd
\end_inset

, i.e., they demonstrate a capacity to (approximately) represent diverse sets
 of mappings 
\begin_inset CommandInset citation
LatexCommand cite
key "alzubaidi2021review"
literal "false"

\end_inset

.
 DNNs 
\begin_inset Quotes eld
\end_inset

learn
\begin_inset Quotes erd
\end_inset

 to represent a mapping over the course of 
\begin_inset Quotes eld
\end_inset

training
\begin_inset Quotes erd
\end_inset

, wherein they are iteratively evaluated on sample data while a 
\begin_inset Quotes eld
\end_inset

learning rule
\begin_inset Quotes erd
\end_inset

 periodically updates the parameters (
\emph on
weights
\emph default
) that parameterize the DNN.
 In recent years they have been investigated for near real-time scientific
 use cases 
\begin_inset CommandInset citation
LatexCommand cite
key "liu2019deep,patton2018167,liu2022exploring"
literal "false"

\end_inset

 but their use for the lowest latency use cases has been very limited 
\begin_inset CommandInset citation
LatexCommand cite
key "Duarte_2018"
literal "false"

\end_inset

.
 The reasons for this are threefold: 
\end_layout

\begin_layout Enumerate
Graphics Processing Units (GPUs), the conventional hardware target for DNNs,
 until very recently, have not been performant enough for these very high
 data rate, very low latency, use cases (due to their low clock speeds and
 low peripheral bandwidth 
\begin_inset CommandInset citation
LatexCommand cite
key "aaij2020allen"
literal "false"

\end_inset

);
\end_layout

\begin_layout Enumerate
DNNs, by virtue of their depth, are resource intensive, in terms of both
 memory (for the weights) and compute (floating-point arithmetic), thereby
 preventing their deployment to FPGAs, which, in particular, have limited
 static RAM available;
\end_layout

\begin_layout Enumerate
DNNs are (typically) defined, trained, and distributed using high-level
 frameworks (such as PyTorch 
\begin_inset CommandInset citation
LatexCommand cite
key "paszke2017automatic"
literal "false"

\end_inset

, TensorFlow 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.1603.04467"
literal "false"

\end_inset

, MXNet 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.1512.01274"
literal "false"

\end_inset

), which abstract all implementation details from the user, thereby making
 portability of existing model architectures (to e.g., FPGA) nigh impossible.
\end_layout

\begin_layout Standard
These three barriers demand of a solution that can simultaneously translate
 a high-level representation of a DNN to a low-level representation, suitable
 for deployment to FPGA, while optimizing resource usage and minimizing
 latency.
 In general, the task of 
\emph on
lowering
\emph default
 high-level representations of programs to lower-level representations is
 the domain of a compiler.
 Similarly, the task of 
\emph on
synthesizing
\emph default
 a
\emph on
 register-transfer level
\emph default
 (RTL) 
\emph on
design
\emph default
, rendered in a 
\emph on
hardware description language
\emph default
 (HDL), from a program, is the domain of high-level synthesis (HLS) 
\begin_inset CommandInset citation
LatexCommand cite
key "7368920"
literal "false"

\end_inset

.
 While several such HLS tools exist 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/2514740,Zhang2008,ferrandi2021bambu"
literal "false"

\end_inset

 and despite, often, bundling robust optimizing compilers, they struggle
 to effectively perform the necessary optimizations in reasonable amounts
 of time (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:High-level-synthesis"

\end_inset

).
\end_layout

\begin_layout Standard
Recently, deep learning compilers (such as TVM 
\begin_inset CommandInset citation
LatexCommand cite
key "chen2018tvm"
literal "false"

\end_inset

, MLIR 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.2002.11054"
literal "false"

\end_inset

, and Glow 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.1805.00907"
literal "false"

\end_inset

) have demonstrated the ability to dramatically reduce inference latencies
 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.1809.02697"
literal "false"

\end_inset

, training times 
\begin_inset CommandInset citation
LatexCommand cite
key "9664259"
literal "false"

\end_inset

, and memory usage 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.1604.06174"
literal "false"

\end_inset

 of DNNs.
 These compilers function by extracting intermediate-level representations
 (IRs) of the DNNs, from the representations produced by the frameworks,
 and performing various optimizations on those IRs (such as kernel fusion
 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/2858788.2688521"
literal "false"

\end_inset

, vectorization 
\begin_inset CommandInset citation
LatexCommand cite
key "maleki2011evaluation"
literal "false"

\end_inset

, and memory planning 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.1604.06174"
literal "false"

\end_inset

).
 The highly optimized IR is then used to generate code for various target
 hardware platforms.
 Given the successes of these compilers, it's natural to wonder whether
 they can adapted to the task of sufficiently optimizing a DNN such that
 it might be synthesized to RTL, for deployment to FPGA.
\end_layout

\begin_layout Standard
In this paper, we present 
\family typewriter
BraggHLS
\family default
, an open source, lightweight, compiler and HLS framework which can lower
 DNNs defined as PyTorch models to FPGA compatible implementations.
 
\family typewriter
BraggHLS
\family default
 uses a combination of compiler and HLS techniques to compile the entire
 DNN into fully scheduled RTL, thereby eliminating all synchronization overheads
 and achieving ultra-low latency.
 
\family typewriter
BraggHLS
\family default
 is general and supports a wide range of DNN layer types, and thus a wide
 range of DNNs, but we particularly focus on optimizations relevant to a
 DNN designed for identifying Bragg diffraction peaks.
 In summary our specific contributions include:
\end_layout

\begin_layout Enumerate
We describe and implement a compiler framework, 
\family typewriter
BraggHLS
\family default
, which can effectively transform unoptimized, hardware-agnostic PyTorch
 models into ultra-low latency RTL designs suitable for deployment to Xilinx
 FPGAs.
 
\family typewriter
BraggHLS
\family default
 is thoroughly tested, open source, and available at 
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/makslevental/bragghls/"
target "https://github.com/makslevental/bragghls/"
literal "false"

\end_inset

;
\end_layout

\begin_layout Enumerate
We show that designs generated by 
\family typewriter
BraggHLS
\family default
 achieve lower latency than Xilinx's state-of-the-art commercial HLS tool
 (Vitis HLS) for a variety of DNN layer types.
 In particular we show that 
\family typewriter
BraggHLS
\family default
 can produce synthesizable designs that meet placement, routing, and timing
 constraints for 
\family typewriter
BraggNN
\family default
, a DNN designed for identifying Bragg diffraction peaks;
\end_layout

\begin_layout Enumerate
We discuss some of the challanges faced even after successful synthesis
 of RTL from a high-level representation of a DNN, namely during the place
 and route phases of implementation.
\end_layout

\begin_layout Standard
The rest of this paper is organized as follows: Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Background"

\end_inset

 reviews key concepts from compilers, high-level synthesis, and RTL design
 for FPGA.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:BraggHLS-compiler-and"

\end_inset

 describes the 
\family typewriter
BraggHLS
\family default
 compiler and HLS framework in detail.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Evaluation"

\end_inset

 evaluates 
\family typewriter
BraggHLS
\family default
’s performance, scalability, and competitiveness with designs generated
 by Vitis HLS.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:BraggNN-case-study"

\end_inset

 describes our case study, i.e., 
\family typewriter
BraggHLS
\family default
 applied to 
\family typewriter
BraggNN
\family default
, a Bragg peak detection DNN with a target latency of 1 µs/sample.
 Finally, Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Conclusion"

\end_inset

 concludes with a summary, and related and future work.
\end_layout

\begin_layout Section
Background
\begin_inset CommandInset label
LatexCommand label
name "sec:Background"

\end_inset


\end_layout

\begin_layout Subsection
Compilers: the path from high to low
\end_layout

\begin_layout Standard
The path from a high-level, abstract, representation of a DNN to a register-tran
sfer level representation can be neatly formulated as a series of progressive
 lowerings between adjacent levels of abstraction.
 Each level of abstraction is rendered as a programming language, IR, or
 HDL, and thus we describe each lowering in terms the representations and
 tools 
\family typewriter
BraggHLS
\family default
 employ in manipulating those representations:
\end_layout

\begin_layout Enumerate
An imperative, 
\emph on
define-by-run,
\emph default
 Python representation, in PyTorch;
\end_layout

\begin_layout Enumerate
High-level data-flow graph representation, in TorchScript;
\end_layout

\begin_layout Enumerate
Low-level data and control flow graph representation, in MLIR.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
PyTorch and TorchScript
\end_layout

\begin_layout Standard
Typically DNN models are represented in terms high-level frameworks, themselves
 implemented within general purpose programming languages.
 Such frameworks are widely used because of their ease of use and large
 library of example implementations of various DNN model architectures.
 
\family typewriter
BraggHLS
\family default
 is targets the PyTorch framework, thus we focus on relevant aspects of
 PyTorch.
 DNNs developed within PyTorch are 
\emph on
defined-by-run
\emph default
: the author imperatively describes the DNN in terms of high-level operations,
 using python, which when executed materializes the (partial) high-level
 data-flow graph (DFG) corresponding to the DNN (e.g., for the purposes of
 reverse-mode automatic differentiation).
 From the perspective of the user, define-by-run enables fast iteration
 at development time, possibly at the cost of some runtime performance.
 
\end_layout

\begin_layout Standard
On the other hand, from the perspective of compilation, define-by-run precludes
 efficient extraction of the high-level DFG; since the DFG is materialized
 only at runtime, it cannot be inferred from the textual representation
 (i.e., the python source) of the DNN.
 Furthermore, a priori, the runtime-materialized DFG is only partially materiali
zed
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

...instead, every intermediate result records only the subset of the computation
 graph that was relevant to their computation.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "paszke2017automatic"
literal "false"

\end_inset


\end_layout

\end_inset

, and only as an in-memory data structure.
 Thus, framework support is necessary for efficiently extracting the full
 DFG.
 Indeed, PyTorch supports a Single Static Assignment (SSA) IR, called TorchScrip
t (TS) IR and accompanying tracing mechanism (the TS JIT), which produces
 TS IR from conventionally defined PyTorch models.
 Lowering from PyTorch to TS IR enables various useful analyses and transformati
ons on a DNN at the level of the high-level DFG (such as kernel fusion 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/2858788.2688521"
literal "false"

\end_inset

) but targeting FPGAs requires a broader collection of transformations.
 To this end, we turn to a recent addition to the compiler ecosystem.
\end_layout

\begin_layout Subsubsection
MLIR
\begin_inset CommandInset label
LatexCommand label
name "subsec:MLIR"

\end_inset


\end_layout

\begin_layout Standard
Multi-level Intermediate Representation 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.2002.11054"
literal "false"

\end_inset

 presents a new approach to building reusable and extensible compiler infrastruc
ture.
 MLIR is composed of a set of 
\emph on
dialect
\emph default
 IRs, subsets of which are mutually compatible, either outright or by way
 of translation/legalization.
 The various dialects aim to capture and formalize the semantics of compute
 intensive programs at varying levels of abstraction, as well as namespace
 related sets of IR transformations.
 The entrypoint into this compiler framework, from PyTorch, is the 
\family typewriter
torch
\family default
 dialect 
\begin_inset CommandInset citation
LatexCommand cite
key "torch-mlir"
literal "false"

\end_inset

, a high-fidelity mapping from TS IR to MLIR native IR, which, in addition
 to performing the translation to MLIR, fully refines all shapes of intermediate
 tensors in the DNN (i.e., computes concrete values for all dimensions of
 each tensor); this is necessary for downstream optimizations and eliminating
 inconsistencies in the DNN 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.48550/arxiv.2203.08402"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
While the 
\family typewriter
torch
\family default
 dialect is necessary for lowering to MLIR and shape refinement, it is a
 representation of a DNN at the same level of abstraction as TS IR: it does
 not capture the precise data flow and control flow necessary for de novo
 implementations of DNN operations (e.g., for FPGA).
 Fortunately, MLIR supports lower-level dialects, such as the 
\family typewriter
linalg
\family default
, 
\family typewriter
affine
\family default
 and 
\family typewriter
scf
\family default
 (structured control flow) dialects.
 The 
\family typewriter
scf
\family default
 dialect describes standard control flow primitives, such as conditionals
 and loops, and is mutually compatible with the 
\family typewriter
arith
\family default
 (arithmetic operations) and 
\family typewriter
memref
\family default
 (memory buffers) dialects.
 The 
\family typewriter
affine
\family default
 dialect, on the other hand, provides a formalization of semantics that
 lend themselves to polyhedral compilation techniques 
\begin_inset CommandInset citation
LatexCommand cite
key "polyhedral-mlir"
literal "false"

\end_inset

, i.e., techniques that enable loop dependence analysis and loop transformations.
 Such loop transformations, particularly loop unrolling, are crucial for
 achieving lowest possible latencies 
\begin_inset CommandInset citation
LatexCommand cite
key "yehpca2022scalehls"
literal "false"

\end_inset

 because they directly inform the concurrency and parallelism of the final
 RTL design.
\end_layout

\begin_layout Subsection
High-level synthesis and FPGA design
\end_layout

\begin_layout Subsubsection
High-level synthesis
\begin_inset CommandInset label
LatexCommand label
name "subsec:High-level-synthesis"

\end_inset


\end_layout

\begin_layout Standard
High-level synthesis tools produce RTL descriptions of designs from high-level
 representations, such as C or C++ 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/2514740,ferrandi2021bambu"
literal "false"

\end_inset

.
 In particular, Xilinx's Vitis HLS, based on the Autopilot project 
\begin_inset CommandInset citation
LatexCommand cite
key "Zhang2008"
literal "false"

\end_inset

, is a state-of-the-art HLS tool.
 Given a high-level, procedural, representation, HLS carries out three fundament
al tasks, in order to produce a corresponding RTL design:
\end_layout

\begin_layout Enumerate
HLS schedules operations (such as 
\family typewriter
mulf
\family default
, 
\family typewriter
addf
\family default
, 
\family typewriter
load
\family default
, 
\family typewriter
store
\family default
) in order to determine which operations should occur during each clock
 cycle; such a schedule depends on three characteristics of the high-level
 representation:
\end_layout

\begin_deeper
\begin_layout Enumerate
The topological ordering of the DFG/CFG of the procedural representation
 (i.e., the dependencies of operations on results of other operations and
 resources);
\end_layout

\begin_layout Enumerate
The completion time for each operation;
\end_layout

\begin_layout Enumerate
The user's desired clock rate/frequency;
\end_layout

\end_deeper
\begin_layout Enumerate
HLS associates (called 
\emph on
binding
\emph default
) operations to particular RTL instantiations of intellectual property (IP)
 for those operations; for example whether to associate an addition operation
 followed by a multiply operation to IPs for each, or whether to associate
 them both with a single IP, designed to perform a 
\begin_inset Quotes eld
\end_inset

fused
\begin_inset Quotes erd
\end_inset

 multiply-accumulate (MAC);
\end_layout

\begin_deeper
\begin_layout Enumerate
In the case of floating-point arithmetic operations, HLS also (with user
 guidance) determines the precision of the floating-point representation;
\end_layout

\end_deeper
\begin_layout Enumerate
HLS builds a finite-state machine (FSM) that implements the schedule of
 operations as control logic, i.e., logic that initiates operations during
 the appropriate stages of the schedule.
\end_layout

\begin_layout Standard
In addition to fulfilling these three fundamental tasks, high-level synthesis
 aims to optimize the program.
 In particular, HLS attempts to maximize concurrency and parallelism (number
 of concurrent operations scheduled during a clock-cycle) in order maximize
 the throughput and minimize the latency of the final implementation.
 Maximizing concurrency entails pipelining operations: operations are executed
 such that they overlap in time, subject to available resources.
 Maximizing parallelism entails partitioning the DNN into subsets of operation
 that can be computed independently and simultaneously and whose results
 are combined upon completion.
 
\end_layout

\begin_layout Standard
While HLS aims to optimize various characteristics of a design, there are
 challenges associated with this kind of automated optimization.
 In particular, maximum concurrency and parallelism necessitates data-flow
 analysis in order to identify data dependencies amongst operations, both
 for scheduling and identifying potential data hazards.
 Such data-flow analysis is expensive and grows (in runtime) as better performan
ce is pursued.
 This can be understood in terms of loop-nest representations of DNN operations;
 for example consider a convolution as in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution"

\end_inset

.
\begin_inset listings
lstparams "language=Python,float,fontsize={\footnotesize},escapeinside={||},mathescape=true"
inline false
status collapsed

\begin_layout Plain Layout

def conv2d(
\end_layout

\begin_layout Plain Layout

  input: MemRef(|$b$|, |$c_{in}$|, |$h$|, |$w$|),
\end_layout

\begin_layout Plain Layout

  output: MemRef(|$b$|, |$c_{out}$|, |$h$|, |$w$|),
\end_layout

\begin_layout Plain Layout

  weight: MemRef(|$c_{out}$|, |$c_{in}$|, |$k$|, |$k$|)
\end_layout

\begin_layout Plain Layout

):
\end_layout

\begin_layout Plain Layout

  for i1 in range(0, |$b$|):
\end_layout

\begin_layout Plain Layout

    for i2 in range(0, |$c_{out}$|):
\end_layout

\begin_layout Plain Layout

      for i3 in range(0, |$h$|):
\end_layout

\begin_layout Plain Layout

        for i4 in range(0, |$w$|):
\end_layout

\begin_layout Plain Layout

          for i5 in range(0, |$c_{in}$|):
\end_layout

\begin_layout Plain Layout

            for i6 in range(0, |$k$|):
\end_layout

\begin_layout Plain Layout

              for i7 in range(0, |$k$|):
\end_layout

\begin_layout Plain Layout

                _3 = i3 + i6
\end_layout

\begin_layout Plain Layout

                _4 = i4 + i7
\end_layout

\begin_layout Plain Layout

                _5 = input[i1, i5, _3, _4]
\end_layout

\begin_layout Plain Layout

                _6 = weight[i2, i5, i6, i7]
\end_layout

\begin_layout Plain Layout

                _7 = output[i1, i2, i3, i4]
\end_layout

\begin_layout Plain Layout

                _8 = _5 * _6
\end_layout

\begin_layout Plain Layout

                _9 = _7 + _8
\end_layout

\begin_layout Plain Layout

                output[i1, i2, i3, i4] = _9
\begin_inset Caption Standard

\begin_layout Plain Layout
Python representation of a padding 
\begin_inset Formula $\left\lfloor k/2\right\rfloor $
\end_inset

, stride 1, 
\begin_inset Formula $c_{out}$
\end_inset

 filter convolution with 
\begin_inset Formula $k\times k$
\end_inset

 kernel applied to (
\begin_inset Formula $\ensuremath{b},\ensuremath{c_{in}},\ensuremath{h},\ensuremath{w}$
\end_inset

)-dimensional
\family typewriter
 input
\family default
 tensor, where 
\begin_inset Formula $b$
\end_inset

 is the batch size, 
\begin_inset Formula $c_{in}$
\end_inset

 is the number of channels, and (
\begin_inset Formula $h,w$
\end_inset

) are the height and width, respectively.
\begin_inset CommandInset label
LatexCommand label
name "lis:Single-filter-convolution"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 A schedule that parallelizes (some of) the arithmetic operations for this
 loop nest can be computed by first unrolling the loops up to some 
\begin_inset Quotes eld
\end_inset

trip-count
\begin_inset Quotes erd
\end_inset

 and then computing the topological sort of the operations.
 Using this scheduling algorithm (known as 
\emph on
list scheduling
\emph default
), the degree to which the loops are unrolled determines how many arithmetic
 operations can be scheduled in parallel.
 The issue is that the 
\family typewriter
store
\family default
s and 
\family typewriter
load
\family default
s on the 
\family typewriter
output
\family default
 array prevent reconstruction of explicit relationships between the inputs
 and outputs of the arithmetic operations across loop iterations.
 The conventional resolution to this loss of information is to perform 
\emph on
store-load forwarding
\emph default
: pairs of 
\family typewriter
store
\family default
 and 
\family typewriter
load
\family default
 operations on the same memory address are eliminated, with the operand
 of the 
\family typewriter
store
\family default
 forwarded to the uses of the 
\family typewriter
load
\family default
 (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution-1"

\end_inset

).
\begin_inset listings
lstparams "language=Python,float,numbers=left,fontsize={\footnotesize},escapeinside={||},mathescape=true,highlightlines={19,25},autogobble=true,numbersep=3pt"
inline false
status collapsed

\begin_layout Plain Layout

def conv2d(
\end_layout

\begin_layout Plain Layout

  input: MemRef(|$b$|, |$c_{in}$|, |$h$|, |$w$|),
\end_layout

\begin_layout Plain Layout

  output: MemRef(|$b$|, |$c_{out}$|, |$h$|, |$w$|),
\end_layout

\begin_layout Plain Layout

  weight: MemRef(|$c_{out}$|, |$c_{in}$|, |$k$|, |$k$|)
\end_layout

\begin_layout Plain Layout

):
\end_layout

\begin_layout Plain Layout

  for i1 in range(0, |$b$|):
\end_layout

\begin_layout Plain Layout

    for i2 in range(0, |$c_{out}$|):
\end_layout

\begin_layout Plain Layout

      for i3 in range(0, |$h$|):
\end_layout

\begin_layout Plain Layout

        for i4 in range(0, |$w$|):
\end_layout

\begin_layout Plain Layout

	  ...
\end_layout

\begin_layout Plain Layout

	  # e.g., i5, i6, i7 = 2, 3, ${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{Salmon}{
\backslash
texttt{4}}}$
\end_layout

\begin_layout Plain Layout

	  _31 = i3 + i6 
\end_layout

\begin_layout Plain Layout

	  _41 = i4 + i7 
\end_layout

\begin_layout Plain Layout

	  _51 = input[i1, i5, _31, _41] 
\end_layout

\begin_layout Plain Layout

	  _61 = weight[i2, i5, i6, i7] 
\end_layout

\begin_layout Plain Layout

	  _71 = output[i1, i2, i3, i4] 
\end_layout

\begin_layout Plain Layout

	  _81 = _51 * _61 
\end_layout

\begin_layout Plain Layout

	  |${
\backslash
setlength{ 
\backslash
fboxsep}{1pt} 
\backslash
colorbox{green}{ 
\backslash
texttt{
\backslash
_91}}}$| = _71 + _81 
\end_layout

\begin_layout Plain Layout

	  output[i1, i2, i3, i4] = _91 
\end_layout

\begin_layout Plain Layout

	  # i5, i6, i7 = 2, 3, ${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{Salmon}{
\backslash
texttt{5}}}$
\end_layout

\begin_layout Plain Layout

	  _32 = i3 + i6 
\end_layout

\begin_layout Plain Layout

	  _42 = i4 + i7 
\end_layout

\begin_layout Plain Layout

	  _52 = input[i1, i5, _32, _42] 
\end_layout

\begin_layout Plain Layout

	  _62 = weight[i2, i5, i6, i7] 
\end_layout

\begin_layout Plain Layout

	  |${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{yellow}{
\backslash
texttt{
\backslash
_72}}}$| = output[i1, i2, i3, i4] 
\end_layout

\begin_layout Plain Layout

	  _82 = _52 * _62 
\end_layout

\begin_layout Plain Layout

	  |${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{Cyan}{
\backslash
texttt{
\backslash
_92}}}$| = |${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{yellow}{
\backslash
texttt{
\backslash
_72}}}$| + _82 
\end_layout

\begin_layout Plain Layout

	  output[i1, i2, i3, i4] = _92
\end_layout

\begin_layout Plain Layout

	  ...
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Store-load forwarding across successive iterations (e.g.,
\family typewriter
 i7
\family default
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$={
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{Salmon}{
\backslash
texttt{4}}}, {
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{Salmon}{
\backslash
texttt{5}}}$
\end_layout

\end_inset

) of the inner loop in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution"

\end_inset

, after unrolling.
 The forwarding opportunity is from the store on line 19 to the load on
 line 25; both can be eliminated and 
\begin_inset ERT
status open

\begin_layout Plain Layout

${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{green}{
\backslash
texttt{
\backslash
_91}}}$
\end_layout

\end_inset

 can replace uses of 
\begin_inset ERT
status open

\begin_layout Plain Layout

${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{yellow}{
\backslash
texttt{
\backslash
_72}}}$
\end_layout

\end_inset

, such as in the computation of 
\family typewriter

\begin_inset ERT
status open

\begin_layout Plain Layout

${
\backslash
setlength{
\backslash
fboxsep}{1pt}
\backslash
colorbox{Cyan}{
\backslash
texttt{
\backslash
_92}}}$
\end_layout

\end_inset


\family default
 (and potentially many others).
\begin_inset CommandInset label
LatexCommand label
name "lis:Single-filter-convolution-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 In order for this transformation to be correct (i.e., preserve program semantics)
, for each pair of candidate 
\family typewriter
store
\family default
 and 
\family typewriter
load
\family default
 operations, it must be verified that there are no intervening memory operations
 on the same memory address.
 These verifications are non-trivial since the iteration spaces of the loops
 need not be regular; in general it might involve solving a small constraint
 satisfaction program 
\begin_inset CommandInset citation
LatexCommand cite
key "rajopadhye2002dependence"
literal "false"

\end_inset

.
 Furthermore, the number of such verifications grows polynomially in the
 parameters of the convolution since the loop nest unrolls into 
\begin_inset Formula $b\times c_{out}\times h\times w\times c_{in}\times k^{2}$
\end_inset

 
\family typewriter
store
\family default
-
\family typewriter
load
\family default
 pairs on the 
\family typewriter
output
\family default
 array.
\end_layout

\begin_layout Standard
Finally, note, though greedy solutions to the scheduling problem solved
 by HLS are possible, in principle scheduling is an integer linear programming
 problem (ILP), instances of which are NP-hard.
 In summary, HLS tools solve computationally intensive problems in order
 to produce a RTL description of a high-level representation of a DNN.
 These phases of the HLS process incur 
\begin_inset Quotes eld
\end_inset

development time
\begin_inset Quotes erd
\end_inset

 costs (i.e., runtime of the tools) and impose practical limitations on the
 amount of design space exploration (for the purpose of achieving latency
 goals) which can be performed.
 
\family typewriter
BraggHLS
\family default
 addresses these issues by enabling the user to employ heuristics (during
 both the parallelization and scheduling phases) which, while not guaranteed
 to be correct, can be 
\emph on
behaviorally verified
\emph default
 (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:AST-transformations-and"

\end_inset

).
\end_layout

\begin_layout Subsection
FPGA design
\end_layout

\begin_layout Standard
Broadly, at the register-transfer level of abstraction, there remain two
 more steps prior to being able to actually deploy a design to an FPGA;
 one of them being a final lowering, so-called logic synthesis, and the
 other being place and route (P&R).
 The entire process is carried out, for example, by Xilinx's Vivado tool.
 
\end_layout

\begin_layout Standard
Logic synthesis is the process of mapping RTL to actual hardware primitives
 on the FPGA (so-called 
\emph on
technology mapping
\emph default
), such as lookup tables (LUTs), block RAMs (BRAMs), flip-flops (FFs), and
 digital signal processors (DSPs).
 Logic synthesis produces a network list (
\emph on
netlist
\emph default
) describing the logical connectivity of various parts of the design.
 Logic synthesis effectively determines the implementation of floating-point
 operations in terms of DSPs; depending on user parameters and other design
 features, DSP resource consumption for floating-point multiplication and
 addition can differ greatly.
 The number of LUTs and DSPs that a high-level representation of a DNN correspon
ds to is relevant to both the performance and feasibility of that DNN when
 deployed to FPGA.
\end_layout

\begin_layout Standard
After the netlist has been produced, the entire design undergoes P&R.
 The goal of P&R is to determine which configurable logic block within an
 FPGA should implement each of the units of logic required by the digital
 design.
 P&R algorithms need to minimize distances between related units of functionalit
y (in order to minimize wire delay), balance wire density across the entire
 fabric of the FPGA (in order to reduce route congestion), and maximize
 the clock speed of the design (a function of both wire delay, logic complexity,
 and route congestion).
 The final, routed design, can then be deployed to the FPGA by producing
 a proprietary 
\emph on
bitstream
\emph default
, which is written to the FPGA.
\end_layout

\begin_layout Section

\family typewriter
BraggHLS
\family default
 compiler and HLS framework
\begin_inset CommandInset label
LatexCommand label
name "sec:BraggHLS-compiler-and"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
BraggHLS
\family default
 is a compiler and HLS framework which employs MLIR for extracting loop-nest
 representations of DNNs.
 It is implemented in python for ease of use and extensibility.
 Critically, and distinctly, it handles the DNN transformations as well
 as scheduling, binding, and FSM extraction; there is no dependence on any
 commercial HLS tools.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BraggHLS-framework-overview.-3"

\end_inset

 shows the architecture of 
\family typewriter
BraggHLS
\family default
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/BraggHLS.pdf
	width 70col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
BraggHLS
\family default
 framework overview (placeholder).
\begin_inset CommandInset label
LatexCommand label
name "fig:BraggHLS-framework-overview.-3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

.
 
\family typewriter
BraggHLS
\family default
 proceeds by first lowering DNNs from PyTorch to MLIR through TorchScript
 and the 
\family typewriter
torch
\family default
 dialect (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:MLIR"

\end_inset

).
 They are then further lowered from the 
\family typewriter
torch
\family default
 dialect to the 
\family typewriter
scf
\family default
 dialect (through the 
\family typewriter
linalg
\family default
 dialect).
 Such a representation lends itself to a straightforward translation to
 python (compare Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution"

\end_inset

 to Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution"

\end_inset

) and indeed 
\family typewriter
BraggHLS
\family default
 performs this translation.
\begin_inset listings
lstparams "language=TeX,float,fontsize={\footnotesize},escapeinside={||},mathescape=true"
inline false
status open

\begin_layout Plain Layout

@conv2d(
\end_layout

\begin_layout Plain Layout

    %input: memref<|$b 
\backslash
times c_{in} 
\backslash
times h 
\backslash
times w$|>,
\end_layout

\begin_layout Plain Layout

    %weight: memref<|$b 
\backslash
times c_{out} 
\backslash
times h 
\backslash
times w$|>,
\end_layout

\begin_layout Plain Layout

    %output: memref<|$c_{out} 
\backslash
times c_{in} 
\backslash
times k 
\backslash
times k$|>
\end_layout

\begin_layout Plain Layout

) {
\end_layout

\begin_layout Plain Layout

  scf.for %i1 = %c0 to |$b$| step %c1 {
\end_layout

\begin_layout Plain Layout

    scf.for %i2 = %c0 to |$c_{out}$| step %c1 {
\end_layout

\begin_layout Plain Layout

      scf.for %i3 = %c0 to |$h$| step %c1 {
\end_layout

\begin_layout Plain Layout

        scf.for %i4 = %c0 to |$w$| step %c1 {
\end_layout

\begin_layout Plain Layout

          scf.for %i5 = %c0 to |$c_{in}$| step %c1 {
\end_layout

\begin_layout Plain Layout

            scf.for %i6 = %c0 to |$k$| step %c1 {
\end_layout

\begin_layout Plain Layout

              scf.for %i7 = %c0 to |$k$| step %c1 {
\end_layout

\begin_layout Plain Layout

                %3 = arith.addi %i3, %i6
\end_layout

\begin_layout Plain Layout

                %4 = arith.addi %i4, %i7
\end_layout

\begin_layout Plain Layout

                %5 = memref.load %input[
\end_layout

\begin_layout Plain Layout

                  %i1, %i5, %i3, %3, %4]
\end_layout

\begin_layout Plain Layout

                %6 = memref.load %weight[
\end_layout

\begin_layout Plain Layout

                  %i2, %i5, %i6, %i7]
\end_layout

\begin_layout Plain Layout

                %7 = memref.load %output[
\end_layout

\begin_layout Plain Layout

                  %i1, %i2, %i3, %i4]
\end_layout

\begin_layout Plain Layout

                %8 = arith.mulf %5, %6
\end_layout

\begin_layout Plain Layout

                %9 = arith.addf %7, %8
\end_layout

\begin_layout Plain Layout

                memref.store %9, %output[
\end_layout

\begin_layout Plain Layout

                  %i1, %i2, %i3, %i4]
\end_layout

\begin_layout Plain Layout

              } 
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

          }  
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return %2
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
scf
\family default
 dialect loop representation of the convolution in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution"

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "lis:Single-filter-convolution-2-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 The benefits of translating 
\family typewriter
scf
\family default
 dialect to python are manifold and discussed in the following (see Section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Symbolic-execution-for"

\end_inset

).
 Ultimately, 
\family typewriter
BraggHLS
\family default
 produces a representation of the DNN that is then fully scheduled using
 the scheduling infrastructure in CIRCT 
\begin_inset CommandInset citation
LatexCommand cite
key "oppermann2022eurollvm"
literal "false"

\end_inset

 (an MLIR adjacent project).
 After scheduling, 
\family typewriter
BraggHLS
\family default
 emits corresponding RTL (as Verilog).
 
\end_layout

\begin_layout Standard

\family typewriter
BraggHLS
\family default
 delegates to the FloPoCo 
\begin_inset CommandInset citation
LatexCommand cite
key "8877424"
literal "false"

\end_inset

 IP generator the task of generating pipelined implementations of the standard
 floating-point arithmetic operations (
\family typewriter
mulf
\family default
, 
\family typewriter
divf
\family default
, 
\family typewriter
addf
\family default
, 
\family typewriter
subf
\family default
, 
\family typewriter
sqrtf
\family default
) at various precisions.
 In addition, we implement a few generic (parameterized by bit width) operators
 in order to support a broad range of DNN operations: two-operand maximum
 (
\family typewriter
max
\family default
); negation (
\family typewriter
neg
\family default
); rectified linear units (
\family typewriter
relu
\family default
).
 Transcendental functions, such as 
\family typewriter
exp
\family default
, are implemented using a Taylor series expansion to 
\begin_inset Formula $k$
\end_inset

-th order (where 
\begin_inset Formula $k$
\end_inset

 is determined on a case-by-case basis).
 Note, FloPoCo's floating-point representation differs slightly from IEEE754,
 foregoing subnormals and differently encoding zeroes, infinities and NaNs
 (for the benefit of reduced complexity) and our implementations 
\family typewriter
max
\family default
, 
\family typewriter
neg
\family default
, 
\family typewriter
relu
\family default
 are adjusted appropriately.
 
\end_layout

\begin_layout Standard
We now discuss some aspects of 
\family typewriter
BraggHLS
\family default
 in greater detail.
\end_layout

\begin_layout Subsection
Symbolic interpretation for fun and profit
\begin_inset CommandInset label
LatexCommand label
name "subsec:Symbolic-execution-for"

\end_inset


\end_layout

\begin_layout Standard
As discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:High-level-synthesis"

\end_inset

, maximizing concurrency and parallelism for a design entails unrolling
 loop nests and analyzing the data-flow of encompassed operations.
 As also discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:High-level-synthesis"

\end_inset

, the formally correct approach to unrolling a loop nest is prohibitively
 expensive in terms of runtime.
 Indeed, for example, in the case of 
\family typewriter
BraggNN
\family default
, repeatedly performing this unrolling was a hindrance to effectively searching
 the design space for a RTL representation achieving the target latency,
 since it often took an enormous amount of time (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:-kernel-convolution-full"

\end_inset

).
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/mlevental/dev_projects/hls_paper/data/conv_unroll.pdf
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $3\times3$
\end_inset

-kernel convolution full unrolling time.
\begin_inset CommandInset label
LatexCommand label
name "fig:-kernel-convolution-full"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Translating 
\family typewriter
scf
\family default
 dialect to python enables 
\family typewriter
BraggHLS
\family default
 to overcome this barrier by enabling us to use the python interpreter as
 a 
\emph on
symbolic interpreter
\emph default
.
 Interpreting the resulting python loop-nests (i.e., running the python program)
 while treating the arithmetic and memory operations on SSA values as operations
 on symbols (i.e., python classes with overloaded methods) enables us to:
 
\end_layout

\begin_layout Enumerate
Partially evaluate functions of iteration variables, such as 
\begin_inset listings
lstparams "language=MuPAD"
inline true
status open

\begin_layout Plain Layout

%3 = arith.addi %i3, %i6
\end_layout

\end_inset

, which enables concretely determining array index operands of all stores
 and loads, such as 
\begin_inset listings
lstparams "language=MuPAD,fontsize={\small}"
inline true
status open

\begin_layout Plain Layout

memref.load %input[%i1,%i5,%i3,%3,%4]
\end_layout

\end_inset

, and thereupon performing memory dependence checks, thus transforming the
 problem of statically verifying memory dependence into a matter of checking
 assertions at runtime;
\end_layout

\begin_layout Enumerate
Unroll loops by recording each floating-point arithmetic operation executed
 while enforcing SSA; e.g., for a loop whose body has repeated assignments
 to the same SSA value (ostensibly violating SSA), we execute the loop and
 instantiate new, uniquely identified, symbols for the result of each operation;
\end_layout

\begin_layout Enumerate
Reconstruct all data flow through arithmetic operations and memory operations
 by interpreting 
\family typewriter
memref
\family default
s as 
\emph on
geometric symbol tables
\emph default
 (i.e., symbol tables indexed by array indices rather than identifiers/names)
 and 
\family typewriter
store
\family default
s and 
\family typewriter
load
\family default
s as assignments and reads on those symbol tables;
\end_layout

\begin_layout Enumerate
Easily swap evaluation rules in order to support various functionality modes,
 e.g., evaluating the floating-point arithmetic operations using (python)
 bindings to FloPoCo's C++ functional models thereby enabling behavioral
 verification.
\end_layout

\begin_layout Standard
See Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:scf-dialect-to"

\end_inset

 for the translation rules from 
\family typewriter
\color blue
scf
\family default
\color inherit
 dialect to python; with 
\end_layout

\begin_layout Standard

\size scriptsize
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout

\size scriptsize
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\color blue
scf
\family default
\color inherit
 dialect to python translation.
\begin_inset CommandInset label
LatexCommand label
name "tab:scf-dialect-to"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\paragraph_spacing double
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="3">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
\color blue
scf
\family default
\color inherit
 dialect
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
python
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{\%5}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{v5 = Val("\%5")}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{memref<}b\times c_{in}\times h\times w\texttt{>}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{MemRef(\ensuremath{b}, c_{in}, \ensuremath{h}, \ensuremath{w})}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{\%5 = memref.load \%input[\%i1, \%i5, \%3, \%4]}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\left\llbracket \texttt{\%5}\right\rrbracket = \left\llbracket \texttt{\%input}\right\rrbracket .\_\_getitem\_\_((\left\llbracket \texttt{\%i1}\right\rrbracket , \left\llbracket \texttt{\%i5}\right\rrbracket , \left\llbracket \texttt{\%3}\right\rrbracket , \left\llbracket \texttt{\%4}\right\rrbracket ))}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{memref.store \%9, \%output[\%i1, \%i5, \%3, \%4]}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\left\llbracket \texttt{\%output}\right\rrbracket .\_\_setitem\_\_((\left\llbracket \texttt{\%i1}\right\rrbracket , \left\llbracket \texttt{\%i5}\right\rrbracket , \left\llbracket \texttt{\%3}\right\rrbracket , \left\llbracket \texttt{\%4}\right\rrbracket ), \left\llbracket \texttt{\%9}\right\rrbracket )}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{scf.for \%i1 = \%c0 to }b\texttt{ step \%c1}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{for \left\llbracket \texttt{\%iv1}\right\rrbracket in range(\left\llbracket \texttt{\%c0}\right\rrbracket , }b\texttt{, \left\llbracket \texttt{\%c1}\right\rrbracket )}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{\%3 = arith.addi \%i3, \%i6}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\texttt{\left\llbracket \texttt{\%3}\right\rrbracket = \left\llbracket \texttt{\%i3}\right\rrbracket + \left\llbracket \texttt{\%i6}\right\rrbracket }}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{\%8 = arith.mulf \%5, \%6}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\texttt{\left\llbracket \texttt{\%8}\right\rrbracket = \left\llbracket \texttt{\%5}\right\rrbracket .\_\_mul\_\_(\left\llbracket \texttt{\%6}\right\rrbracket })}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \texttt{\%9 = arith.addf \%7, \%8}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\texttt{\left\llbracket \texttt{\%9}\right\rrbracket = \left\llbracket \texttt{\%7}\right\rrbracket .\_\_add\_\_(\left\llbracket \texttt{\%8}\right\rrbracket )}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset VSpace -15pt
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \begin{array}{c}
\texttt{\%63 = arith.cmpfugt \%10, \%c0}\\
\texttt{\%64 = arith.select \%63, \%c0\,\,}
\end{array}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\texttt{\left\llbracket \texttt{\%64}\right\rrbracket = \left\llbracket \texttt{\%10}\right\rrbracket .relu()}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset VSpace -10pt
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\left\llbracket \begin{array}{c}
\texttt{\texttt{\%8 = arith.mulf \%5, \%6}}\\
\texttt{\%9 = arith.addf \%7, \%8}
\end{array}\right\rrbracket $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $\texttt{\texttt{\left\llbracket \texttt{\%9}\right\rrbracket = fma(\left\llbracket \texttt{\%5}\right\rrbracket , \left\llbracket \texttt{\%6}\right\rrbracket , \left\llbracket \texttt{\%7}\right\rrbracket )}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset VSpace -10pt
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
AST transformations and behavioral verification
\begin_inset CommandInset label
LatexCommand label
name "subsec:AST-transformations-and-1"

\end_inset


\end_layout

\begin_layout Standard
Prior to intepretation, 
\family typewriter
BraggHLS
\family default
 performs some simple AST transformations on the python generated from 
\family typewriter
scf
\family default
 dialect:
\end_layout

\begin_layout Enumerate

\series bold
Hoist globals
\series default
: all DNN tensors which are fixed (i.e., weights) are moved out of the body
 of the python 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
BraggHLS
\family default
 translates the MLIR 
\family typewriter
module
\family default
 corresponding to the DNN into a single python function in order to simplify
 analysis and interpretation.
\end_layout

\end_inset

 and into the parameter list, for the purpose of ultimately exposing them
 at the RTL module interface; 
\end_layout

\begin_layout Enumerate

\series bold
Remove 
\family typewriter
if
\family default
 expressions
\series default
: DNN 
\family typewriter
relu
\family default
 operations are lowered to the 
\family typewriter
scf
\family default
 dialect as a decomposition of 
\family typewriter
arith.cmpfugt
\family default
 and 
\family typewriter
arith.select
\family default
; this transformation recomposes them into a 
\family typewriter
relu
\family default
;
\end_layout

\begin_layout Enumerate

\series bold
Remove MACs
\series default
: sequences of 
\family typewriter
load
\family default
-
\family typewriter
multiply
\family default
-
\family typewriter
add
\family default
-
\family typewriter
store
\family default
 are very common in DNN implementations, thus we schedule such sequences
 jointly (this transformation coalesces such sequences into a single 
\family typewriter
FMAC
\family default
);
\end_layout

\begin_layout Enumerate

\series bold
Reduce 
\family typewriter
for
\family default
s
\series default
: this transformation implements the reduction tree structure for non-paralleliz
able loop-nests mentioned in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Symbolic-execution-for"

\end_inset

.
\end_layout

\begin_layout Standard
These transformations on the python AST are simple (implemented with procedural
 pattern matching), extensible, and efficient (marginal runtime cost) because
 they are unverified: no effort is made to verify their formal correctness.
 Thus, 
\family typewriter
BraggHLS
\family default
 trades formal correctness for development time performance.
 This tradeoff enables quick design space iteration, which for example,
 enabled us to achieve very low latency implementations for 
\family typewriter
BraggNN
\family default
 (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:BraggNN-case-study"

\end_inset

).
 As a substitute for formal verification, 
\family typewriter
BraggHLS
\family default
 supports behavioral verification.
 Specifically, 
\family typewriter
BraggHLS
\family default
, can generate testbenches for all synthesized RTL.
 The test vectors for these testbenches are generated by evaluating the
 generated python representation of the DNN on randomly generated inputs
 but with floating-point operations now evaluated using functional models
 of the corresponding FloPoCo operators.
 The testbenches can then be run using any IEEE 1364 compliant simulator.
 For example, we run a battery of such testbenches (corresponding to various
 DNN operation types), using 
\family typewriter
cocotb
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "rosser2018cocotb"
literal "false"

\end_inset

 and 
\family typewriter
iverilog
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "williamsicarus"
literal "false"

\end_inset

, as a part of our continuous integration process
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/makslevental/bragghls/actions
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Scheduling
\end_layout

\begin_layout Standard
Recall that one of the critical functions which HLS fulfills is the scheduling
 of operations during each clock cycle, in such a way that they preserve
 the data-flow graph of a DNN; that schedule then informs the construction
 of a corresponding FSM.
 As already mentioned, scheduling arbitrary DNNs involves formulating and
 solving an ILP.
 In the resource-unconstrained case, due to the precedence relations induced
 by data-flow, the constraint matrix of the associated ILP is 
\emph on
totally unimodular matrix
\emph default
 and the feasible region of the problem is an integral polyhedron.
 Thus, in such cases, the scheduling problem can be solved optimally in
 polynomial time with a LP solver 
\begin_inset CommandInset citation
LatexCommand cite
key "tuprints9272"
literal "false"

\end_inset

.
 In the resource-constrained case it is possible to transform resource constrain
ts into precedence constraints as well, by picking a particular (possibly
 heuristic) linear ordering on the particularly resource-constrained operations.
 This transformation partitions resource constrained operations into distinct
 clock cycles, thereby guaranteeing sufficient resources are available for
 all operations scheduled within the same clock cycle 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/3174243.3174268"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard

\family typewriter
BraggHLS
\family default
 uses the explicit parallelism of the 
\family typewriter
scf.parallel
\family default
 loop-nest representation to inform such a linear ordering on resource-constrain
ed operations.
 By assumption, for loop-nests which can be reprepresented as 
\family typewriter
scf.parallel
\family default
 loop-nests (see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution-2-2"

\end_inset

), each instance of a floating-point arithmetic operation in the body correspond
ing to unique values of the iteration variables (e.g., 
\family typewriter
%i1
\family default
,
\family typewriter
 %i2
\family default
,
\family typewriter
 %i3
\family default
,
\family typewriter
 %i4
\family default
 for Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution-2-2"

\end_inset

) is independent of all other such instances
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Data-flow within a loop body must still be respected.
\end_layout

\end_inset

.
 This exactly determines total resource usage per loop-nest; for example,
 the convolution in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution-2-2"

\end_inset

, would bind to 
\begin_inset Formula $2K_{i}$
\end_inset

 DSPs (assuming 
\family typewriter
mulf
\family default
, 
\family typewriter
addf
\family default
 bind to one DSP each), where
\begin_inset Formula 
\begin{multline*}
K_{i}:=\left|\left\{ \texttt{\%iv1}=\texttt{\%c0}+\texttt{\%c1}\times\mathbb{N}\,\wedge\,\texttt{\%iv1}<b\right\} \right|\times\\
\left|\left\{ \texttt{\%iv2}=\texttt{\%c0}+\texttt{\%c1}\times\mathbb{N}\,\wedge\,\texttt{\%iv2}<c_{out}\right\} \right|\times\\
\left|\left\{ \texttt{\%iv3}=\texttt{\%c0}+\texttt{\%c1}\times\mathbb{N}\,\wedge\,\texttt{\%iv3}<h\right\} \right|\times\\
\left|\left\{ \texttt{\%iv4}=\texttt{\%c0}+\texttt{\%c1}\times\mathbb{N}\,\wedge\,\texttt{\%iv4}<w\right\} \right|
\end{multline*}

\end_inset

where 
\begin_inset Formula $\texttt{\%c1}\times\mathbb{N}$
\end_inset

 represents all multiples of 
\begin_inset Formula $\texttt{\%c1}$
\end_inset

.
 That is to say, 
\begin_inset Formula $K_{i}$
\end_inset

 is the cartesian product of the iteration spaces of the parallel iteration
 variables.
 
\begin_inset listings
lstparams "language=MuPAD,float,fontsize={\footnotesize},escapeinside={||},mathescape=true"
inline false
status collapsed

\begin_layout Plain Layout

@conv2d(
\end_layout

\begin_layout Plain Layout

    %input: memref<|$b 
\backslash
times c_{in} 
\backslash
times h 
\backslash
times w$|>,
\end_layout

\begin_layout Plain Layout

    %weight: memref<|$b 
\backslash
times c_{out} 
\backslash
times h 
\backslash
times w$|>,
\end_layout

\begin_layout Plain Layout

    %output: memref<|$c_{out} 
\backslash
times c_{in} 
\backslash
times k 
\backslash
times k$|>
\end_layout

\begin_layout Plain Layout

) {
\end_layout

\begin_layout Plain Layout

  scf.parallel (%i1, %i2, %i3, %i4) =
\end_layout

\begin_layout Plain Layout

               (%c0, %c0, %c0, %c0) to
\end_layout

\begin_layout Plain Layout

               (|$b$|, |$c_{out}$|, |$h$|, |$w$|) step
\end_layout

\begin_layout Plain Layout

               (%c1, %c1, %c1, %c1) {
\end_layout

\begin_layout Plain Layout

    scf.for %i5 = %c0 to |$c_{in}$| step %c1 {
\end_layout

\begin_layout Plain Layout

      scf.for %i6 = %c0 to |$k$| step %c1 {
\end_layout

\begin_layout Plain Layout

        scf.for %i7 = %c0 to |$k$| step %c1 {
\end_layout

\begin_layout Plain Layout

          %3 = arith.addi %i3, %i6
\end_layout

\begin_layout Plain Layout

          %4 = arith.addi %i4, %i7
\end_layout

\begin_layout Plain Layout

          %5 = memref.load %input[%i1, %i5, %i3, %3, %4]
\end_layout

\begin_layout Plain Layout

          %6 = memref.load %weight[%i2, %i5, %i6, %i7]
\end_layout

\begin_layout Plain Layout

          %7 = memref.load %output[%i1, %i2, %i3, %i4]
\end_layout

\begin_layout Plain Layout

          %8 = arith.mulf %5, %6
\end_layout

\begin_layout Plain Layout

          %9 = arith.addf %7, %8
\end_layout

\begin_layout Plain Layout

          memref.store %9, %output[%i1, %i2, %i3, %i4]
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return %2
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Parallel loop representation of the convolution in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution"

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "lis:Single-filter-convolution-2-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

.
 Taking the maximum over such 
\begin_inset Formula $K:=\max_{i}K_{i}$
\end_inset

 across all 
\family typewriter
scf.parallel
\family default
 loop-nests, we can infer peak usage of any resource.
 Then, after indexing available hardware resources 
\begin_inset Formula $j=1,\dots,K$
\end_inset

, we can bind the operations of any particular loop-nest.
 This leads to a linear ordering on resource-constrained operations such
 that operations bound to the same hardware resource index 
\begin_inset Formula $j$
\end_inset

 must be ordered according to their execution order during interpretation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
BraggHLS
\family default
 only needs to construct a partial precedence ordering 
\begin_inset Formula $\texttt{op}_{a}<\texttt{op}_{b}$
\end_inset

 for operations 
\begin_inset Formula $\texttt{op}_{a},\texttt{op}_{b}$
\end_inset

 which CIRCT then combines with the delays of the operations to construct
 constraints such as 
\begin_inset Formula $\texttt{start\_op}_{a}+\texttt{delay}_{a}\leq\texttt{start\_op}_{b}$
\end_inset

.
\end_layout

\end_inset

.
 Note this ordering coincides with the higher-level structure of the DNN,
 since ordering of
\family typewriter
 scf.parallel
\family default
 loop nests (and thus interpretation order during execution of the python
 program) is determined by the higher-level structure of the DNN.
\end_layout

\begin_layout Standard
For DNN operations that do not lower 
\family typewriter
scf.parallel
\family default
 loop-nests but lower to sequential loop nests (e.g., 
\family typewriter
sum
\family default
, 
\family typewriter
max
\family default
, or 
\family typewriter
prod
\family default
), we fully unroll the loops and transform the resulting, sequential, operations
 to a reduction tree; we use As-Late-As-Possible scheduling 
\begin_inset CommandInset citation
LatexCommand cite
key "baruch1996scheduling"
literal "false"

\end_inset

 amongst the subtrees of such reduction trees.
\end_layout

\begin_layout Section
Evaluation
\begin_inset CommandInset label
LatexCommand label
name "sec:Evaluation"

\end_inset


\end_layout

\begin_layout Standard
We evaluate 
\family typewriter
BraggHLS both
\family default
 on individual DNN kernels (i.e., layers) and end-to-end, on our use-case
 
\family typewriter
BraggNN
\family default
.
\end_layout

\begin_layout Subsection
DNN layers
\end_layout

\begin_layout Standard
asdasd
\begin_inset Float figure
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/addmm.pdf
	lyxscale 50
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
addmm
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "2dlattice-1-1-2"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/batch_norm.pdf
	lyxscale 50
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
batch_norm
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "2dlattice-1-2-2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset CommandInset label
LatexCommand label
name "2dlattice-1-3"

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/conv.pdf
	lyxscale 50
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
conv
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "2dlattice-1-1-1-1"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/max_pool_2d.pdf
	lyxscale 50
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
max_pool_2d
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "2dlattice-1-2-1-1"

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Resource usage and latency vs.
 unroll factor of various DNN modules.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide true
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/elapsed_time.pdf
	lyxscale 50
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Runtime of Vitis HLS vs.
 unroll factor.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
BraggNN
\family default
 case study
\begin_inset CommandInset label
LatexCommand label
name "sec:BraggNN-case-study"

\end_inset


\end_layout

\begin_layout Standard
TODO: put the comparison to both the dataflow pipelined numbers and the
 fully unrolled numbers for braggnn here (save the other eval section for
 just ops).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/braggnn.pdf
	lyxscale 50
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
braggnn
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
High-energy diffraction microscopy techniques can provide non-destructive
 characterization for a broad class of single-crystal and polycrystalline
 materials.
 The critical steps in a typical HEDM experiment involve an analysis to
 determine precise Bragg diffraction peak characteristics (and reconstruction
 of material grain information from the peak characteristics).
 Peak characteristics are typically computed by fitting the peaks to a probabili
ty distribution, e.g., Gaussian, Lorentzian, Voigt, or Pseudo-Voigt.
 As already mentioned (in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Introduction"

\end_inset

) the experiments can have collection rates of 80 GB/s.
 The data rates, though more modest than those observed at the LHC, combined
 with the runtime of the fitting procedure, merit exploring the same low
 latency approach in order to enable experimental modalities that depend
 on measurement-based feedback (i.e., experiment steering).
 
\begin_inset listings
lstparams "language=Python,float,fontsize={\footnotesize},escapeinside={||},mathescape=true"
inline false
status collapsed

\begin_layout Plain Layout

BraggNN(
\end_layout

\begin_layout Plain Layout

  (cnn_layers_1): Conv2d(|$k 
\backslash
times 16 $|, kernel=3, stride=1)
\end_layout

\begin_layout Plain Layout

  (nlb): NLB(
\end_layout

\begin_layout Plain Layout

    (theta_layer): Conv2d(|$k 
\backslash
times 16 $|, |$k 
\backslash
times 8 $|, kernel=1, stride=1)
\end_layout

\begin_layout Plain Layout

    (phi_layer): Conv2d(|$k 
\backslash
times 16 $|, |$k 
\backslash
times 8 $|, kernel=1, stride=1)
\end_layout

\begin_layout Plain Layout

    (g_layer): Conv2d(|$k 
\backslash
times 16 $|, |$k 
\backslash
times 8 $|, kernel=1, stride=1)
\end_layout

\begin_layout Plain Layout

    (out_cnn): Conv2d(|$k 
\backslash
times 8 $|, |$k 
\backslash
times 16 $|, kernel=1, stride=1)
\end_layout

\begin_layout Plain Layout

    (soft): Softmax()
\end_layout

\begin_layout Plain Layout

  )
\end_layout

\begin_layout Plain Layout

  (cnn_layers_2): Sequential(
\end_layout

\begin_layout Plain Layout

    (0): ReLU()
\end_layout

\begin_layout Plain Layout

    (1): Conv2d(|$k 
\backslash
times 16 $|, |$k 
\backslash
times 8 $|, kernel=3, stride=1)
\end_layout

\begin_layout Plain Layout

    (2): ReLU()
\end_layout

\begin_layout Plain Layout

    (3): Conv2d(|$k 
\backslash
times 8 $|, |$k 
\backslash
times 2 $|, kernel=3, stride=1)
\end_layout

\begin_layout Plain Layout

    (4): ReLU()
\end_layout

\begin_layout Plain Layout

  )
\end_layout

\begin_layout Plain Layout

  (dense_layers): Sequential(
\end_layout

\begin_layout Plain Layout

    (0): Linear(in_features=|$k 
\backslash
times 50$|, out_features=|$k 
\backslash
times 16 $|)
\end_layout

\begin_layout Plain Layout

    (1): ReLU()
\end_layout

\begin_layout Plain Layout

    (2): Linear(in_features=|$k 
\backslash
times 16 $|, out_features=|$k 
\backslash
times 8 $|)
\end_layout

\begin_layout Plain Layout

    (3): ReLU()
\end_layout

\begin_layout Plain Layout

    (4): Linear(in_features=|$k 
\backslash
times 8 $|, out_features=|$k 
\backslash
times 4 $|)
\end_layout

\begin_layout Plain Layout

    (5): ReLU()
\end_layout

\begin_layout Plain Layout

    (6): Linear(in_features=|$k 
\backslash
times 4 $|, out_features=2)
\end_layout

\begin_layout Plain Layout

    (7): ReLU()
\end_layout

\begin_layout Plain Layout

  )
\end_layout

\begin_layout Plain Layout

)
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
BraggNN
\family default
 for 
\begin_inset Formula $k=1,\dots,4$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "lis:Single-filter-convolution-3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
BraggNN
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Liu:fs5198"
literal "false"

\end_inset

, a DNN aimed at efficiently characterizing Bragg diffraction peaks, achieves
 a batched latency of 22 µs/sample.
 This is a large speedup over the classical pseudo-Voigt peak fitting methods,
 but still falls far short of the 1 µs/sample target for handling the 1
 MHz sampling rates.
 In addition, the current implementation of 
\family typewriter
BraggNN
\family default
, deployed to either a data-center class GPU such as a NVIDIA V100, or even
 a workstation class GPU such as a NVIDIA RTX 2080Ti, has no practicable
 means to being deployed at the edge, i.e., adjacent or proximal to the high
 energy microscopy equipment.
 We applied 
\family typewriter
BraggHLS
\family default
 to the PyTorch representation of 
\family typewriter
BraggNN
\family default
\emph on
 
\emph default
(see Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Single-filter-convolution-3"

\end_inset

) and achieve a RTL implementation which synthesizes to a 1,238 interval
 design that places, routes, and meets timing closure for a clock period
 of 10 ns (for a Xilinx Alveo U280).
 The design consists of a three stage pipeline with long stage measuring
 480 intervals.
 Thus, the throughput of the implementation is 4.8 µs/sample.
 See Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Resource-usage-for"

\end_inset

 for a summary of the resource usage of the implementation.
\begin_inset Float table
wide true
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resource usage for 
\family typewriter
BraggNN
\family default
 with 
\begin_inset Formula $k=1$
\end_inset

 and 
\begin_inset Formula $\left(5,3\right)$
\end_inset

-precision FloPoCo 
\begin_inset CommandInset label
LatexCommand label
name "tab:Resource-usage-for"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="7">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Site Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR0 %
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR1 %
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR2 %
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CLB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5047
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
52648
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
53900
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.18
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
97.50
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99.81
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset

CLBL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2773
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28613
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29227
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
97.72
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99.82
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset

CLBM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2274
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24035
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24673
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.86
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
97.23
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99.81
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CLB LUTs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19797
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
263733
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
311794
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.50
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61.05
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
72.17
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset

LUT as Logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19797
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
263733
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
311794
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.50
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61.05
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
72.17
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

using O5 output only
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
277
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3944
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4304
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.06
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.91
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

using O6 output only
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17176
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
202564
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
266733
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.91
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46.89
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61.74
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

using O5 and O6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2344
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
57225
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40757
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.53
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.25
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.43
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset

LUT as Memory
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

LUT as Distributed RAM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

LUT as Shift Register
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CLB Registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12527
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
286226
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
339820
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.42
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33.13
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
39.33
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CARRY8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
244
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5184
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5184
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.44
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.60
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.60
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Block RAM Tile
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

RAMB36/FIFO
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

RAMB18
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
URAM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DSPs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unique Control Sets
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
189
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2641
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3179
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.17
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.45
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.94
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Super long line usage across super logic regions for 
\family typewriter
BraggNN
\family default

\begin_inset CommandInset label
LatexCommand label
name "tab:Resource-usage-for-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="5">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Available
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Util %
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR2 
\begin_inset Formula $\leftrightarrow$
\end_inset

 SLR1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21366
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23040
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
92.73
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR1 
\begin_inset Formula $\rightarrow$
\end_inset

 SLR2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
< 0.01
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR2 
\begin_inset Formula $\rightarrow$
\end_inset

 SLR1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21364
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
92.73
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR1 
\begin_inset Formula $\leftrightarrow$
\end_inset

 SLR0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3904
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23040
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16.94
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR0 
\begin_inset Formula $\rightarrow$
\end_inset

 SLR1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
< 0.01
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SLR1 
\begin_inset Formula $\rightarrow$
\end_inset

 SLR0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3902
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16.94
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total SLLs Used
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25270
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The most challenging aspect of implementing 
\family typewriter
BraggNN
\family default
 was minimizing latency while satisfying compute resource constraints (LUTs,
 DSPs, BRAMs) and meeting routing 
\begin_inset Quotes eld
\end_inset

closure
\begin_inset Quotes erd
\end_inset

, i.e., not exceeding available routing resources and avoiding congestion.
 Two design choices made for the purposes of reducing resource consumption
 was reducing the precision used for the floating-point operations.
 We reduced the precision from IEEE half precision (5 bits for the exponent
 and 11 bits for the mantissa) to FloPoCo 
\begin_inset Formula $\left(5,4\right)$
\end_inset

-precision (5 bits for the exponent and 4 bits for the mantissa).
 This was justified by an examination of the distribution of the weights
 of the fully trained 
\family typewriter
BraggNN
\family default
 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BraggHLS-framework-overview.-1"

\end_inset

).
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../figures/exp_hist.pdf
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
BraggHLS
\family default
 weights exponent distribution.
\begin_inset CommandInset label
LatexCommand label
name "fig:BraggHLS-framework-overview.-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 Reducing the precision enabled us to eliminate BRAMs from the design as
 well, since, at the lower precision, all weights could be represented as
 registered constants.
 The reduced precision also drives the Vivado synthesizer to infer implementatio
ns of the floating-point operations that make no use of DSPs; this was not
 intentional but seemingly cannot be altereted.
 Most likely this is due to the fact that DSP48 hardware block includes
 a 18-bit by 25-bit signed multiplier and a 48-bit adder 
\begin_inset CommandInset citation
LatexCommand cite
key "guideultrascale"
literal "false"

\end_inset

, neither of which neatly divide the bit width of FloPoCo 
\begin_inset Formula $\left(5,4\right)$
\end_inset

-precision cores
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The actual bit width for FloPoCo 
\begin_inset Formula $\left(5,4\right)$
\end_inset

-precision is 12 bits: 1 extra bit is needed for the sign and 2 bits are
 needed for FloPoCo's handling of exceptional conditions.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Achieving routing closure was very difficult due to the nature of the Xilinx's
 UltraScale architecture, of which the Alveo U280 is an instance.
 The UltraScale architecture achieves its scale through 
\begin_inset Quotes eld
\end_inset

Stacked Silicon Interconnect
\begin_inset Quotes erd
\end_inset

 (SSI) technology 
\begin_inset CommandInset citation
LatexCommand cite
key "leibson2013xilinx"
literal "false"

\end_inset

, which amounts to multiple distinct FPGA dies, called Super Logic Regions
 (SLRs), on the same chip, connected by interposers.
 Adjacent SLRs communicate with each other using a limited set of Super
 Long Lines (SLLs).
 These SLLs determine the maximum bus width that span two SLRs.
 On the Alveo U280 there are exactly 23,040 SLLs available between adjacent
 SLRs and at 
\begin_inset Formula $\left(5,4\right)$
\end_inset

-precision 
\family typewriter
BraggNN
\family default
 needs 23,328 SLLs between SLR2 and SLR1
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
We route the output of 
\family typewriter
cnn_layers_1
\family default
 (
\begin_inset Formula $1\times16\times9\times9\times12$
\end_inset

 wires) as well as the output of 
\begin_inset Formula $\texttt{soft(theta\_layer}\times\texttt{phi\_layer)}\times\texttt{g\_layer}$
\end_inset

 (
\begin_inset Formula $1\times8\times9\times9\times12$
\end_inset

 wires) from SLR2 to SLR1.
\end_layout

\end_inset

.
 Thus, we further reduce the precision to 
\begin_inset Formula $\left(5,3\right)$
\end_inset

.
 Finally, since multiple dies constitute independent clock domains, the
 SLLs that cross SLRS are sensitive hold time violations due to the higher
 multi-die variability 
\begin_inset CommandInset citation
LatexCommand cite
key "rapidwright"
literal "false"

\end_inset

.
 This multi-die variability leads to high congestion if not addressed.
 Thus, routing across them needs to handled manually using placement and
 routing constraints for logic in each SLR and the addition of so-called
 
\begin_inset Quotes eld
\end_inset

launch
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

latch
\begin_inset Quotes erd
\end_inset

 registers in each SLR.
 See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BraggHLS-framework-overview.-2"

\end_inset

 for an illustration on the effect of using launch and latch registers as
 well as placement and routing constraints.
\begin_inset Float figure
wide true
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename nopblocks.png
	lyxscale 20
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
BraggNN
\family default
 fails to achieve routing closure without placement and routing constraints
 and launch and latch registers.
\begin_inset CommandInset label
LatexCommand label
name "fig:BraggHLS-framework-overview.-2-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename withpblocks.png
	lyxscale 20
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
BraggNN
\family default
 achieves routing closure with use of per SLR placement and routing constraints
 (
\family typewriter
pblock_1
\family default
, 
\family typewriter
pblock_2
\family default
, 
\family typewriter
pblock_3
\family default
) and launch and latch registers (not highlighted).
\begin_inset CommandInset label
LatexCommand label
name "fig:BraggHLS-framework-overview.-2-1-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Congestion maps for 
\family typewriter
BraggNN
\family default
 on a Xilinx Alveo U280.
 
\color magenta
Magenta
\color inherit
 indicates area of high congestion.
\begin_inset CommandInset label
LatexCommand label
name "fig:BraggHLS-framework-overview.-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\begin_inset CommandInset label
LatexCommand label
name "sec:Conclusion"

\end_inset


\end_layout

\begin_layout Standard
287 + 471 + 480
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Remember though that your final submission is supposed to have all the bibliogra
phy entries embedded in the \SpecialChar LaTeX
-file.
 This means you eventually have to copy the .bbl file into the latex file
 and remove the bibtex lines.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "ref"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
